<Project Sdk="Microsoft.NET.Sdk">

  <Import Project="$([MSBuild]::GetPathOfFileAbove('Project.Shared.props', '$(MSBuildThisFileDirectory)'))" />

  <PropertyGroup>
    <TargetFramework>net6.0</TargetFramework>

    <AssemblyName>NuGetTestBed.PackageProvider</AssemblyName>
    <RootNamespace>NuGetTestBed.PackageProvider</RootNamespace>

    <Version>1.0.0</Version>
  </PropertyGroup>

  <ItemGroup>
    <PackageReference Include="JetBrains.Annotations" Version="2022.1.0" />
  </ItemGroup>

  <!--
    For more available properties, see: https://docs.microsoft.com/en-us/dotnet/core/tools/csproj#nuget-metadata-properties
  -->
  <PropertyGroup>
    <GeneratePackageOnBuild>true</GeneratePackageOnBuild>
    <PackageOutputPath>$(MSBuildThisFileDirectory)../_Packages/LocalPackagesSource</PackageOutputPath>
  </PropertyGroup>

  <!-- Makes it so that on changes of "PackageProducer" the "PackageConsumer" project is rebuilt
       with the newly built "PackageProducer" assembly.
  -->
  <Target Name="_OverwriteAssemblyInGlobalPackagesFolder" AfterTargets="PostBuildEvent">

    <PropertyGroup>
      <ExtractedPackageTargetFolder>$(NuGetPackageFolders)/$(PackageId)/$(PackageVersion)/lib/$(TargetFramework)</ExtractedPackageTargetFolder>
    </PropertyGroup>

    <!-- Overwrites the assembly in the "extracted package" folder so that the "PackageConsumer" project can use
         the newly built assembly without the need to change the version of the "PackageProducer".
    -->
    <Copy SourceFiles="$(TargetPath)"
          DestinationFolder="$(ExtractedPackageTargetFolder)"
          Condition=" Exists('$(ExtractedPackageTargetFolder)/$(AssemblyName).dll') "
    />

    <!-- Mark the project file of the "PackageConsumer" project as "modified" so that the C# compiler
         picks up on the newly built "PackageProducer" assembly.
    -->
    <Touch Files="$(MSBuildThisFileDirectory)../PackageConsumer/PackageConsumer.csproj" />

  </Target>

</Project>
